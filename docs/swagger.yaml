basePath: /api/v1
definitions:
  dto.APIResponse:
    properties:
      code:
        $ref: '#/definitions/dto.Code'
      message:
        type: string
    type: object
  dto.Code:
    enum:
    - 0
    type: integer
    x-enum-varnames:
    - CodeSuccess
  dto.CreateAddressReq:
    properties:
      address:
        description: Full address
        maxLength: 50
        type: string
      name:
        description: Name of the person
        maxLength: 20
        type: string
      phone:
        description: Phone number
        type: string
    required:
    - address
    - name
    - phone
    type: object
  dto.CreateOrderItemReq:
    properties:
      price:
        description: Price of the product at the time of order
        type: number
      product_id:
        description: ID of the Product
        type: integer
      quantity:
        description: Quantity of the product in the Order
        minimum: 1
        type: integer
    required:
    - price
    - product_id
    - quantity
    type: object
  dto.CreateOrderReq:
    properties:
      address:
        $ref: '#/definitions/dto.CreateAddressReq'
      amount:
        description: Total amount of the order
        type: number
      order_items:
        items:
          $ref: '#/definitions/dto.CreateOrderItemReq'
        type: array
    required:
    - address
    - amount
    - order_items
    type: object
  dto.LoginUserReq:
    properties:
      password:
        description: Password of the User
        maxLength: 20
        minLength: 6
        type: string
      username:
        description: Username of the User
        maxLength: 20
        minLength: 3
        type: string
    required:
    - password
    - username
    type: object
  dto.RegisterUserReq:
    properties:
      email:
        description: Email of the User
        type: string
      password:
        description: Password of the User
        maxLength: 20
        minLength: 6
        type: string
      username:
        description: Username of the User
        maxLength: 20
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  dto.ResetPasswordReq:
    properties:
      new_password:
        description: New Password of the User
        maxLength: 20
        minLength: 6
        type: string
      old_password:
        description: Old Password of the User
        maxLength: 20
        minLength: 6
        type: string
      username:
        description: Username of the User
        maxLength: 20
        minLength: 3
        type: string
    required:
    - new_password
    - old_password
    - username
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact:
    email: echenwen@gmail.com
    name: n3xtchen
    url: http://n3xtchen.github.io/n3xtchen
  description: This is a server for Gin 3at API.
  termsOfService: http://swagger.io/terms/
  title: Gin 3at
  version: "1.0"
paths:
  /orders:
    post:
      consumes:
      - application/json
      parameters:
      - description: Order details
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/dto.CreateOrderReq'
      produces:
      - application/json
      responses:
        "201":
          description: Order created successfully
          schema:
            $ref: '#/definitions/dto.APIResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/dto.APIResponse'
        "500":
          description: Inyernal server error
          schema:
            $ref: '#/definitions/dto.APIResponse'
      summary: Create a new order
      tags:
      - orders
  /user/login:
    post:
      consumes:
      - application/json
      description: Login a user with username and Password
      parameters:
      - description: User login details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.LoginUserReq'
      produces:
      - application/json
      responses:
        "200":
          description: User logged in successfully
          schema:
            $ref: '#/definitions/dto.APIResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/dto.APIResponse'
        "500":
          description: Failed to login user
          schema:
            $ref: '#/definitions/dto.APIResponse'
      summary: Login a user
      tags:
      - user
  /user/logout:
    post:
      consumes:
      - application/json
      description: Logout a user by clearing their session
      produces:
      - application/json
      responses:
        "200":
          description: User logged out successfully
          schema:
            $ref: '#/definitions/dto.APIResponse'
        "400":
          description: User not found
          schema:
            $ref: '#/definitions/dto.APIResponse'
        "500":
          description: Failed to logout user
          schema:
            $ref: '#/definitions/dto.APIResponse'
      summary: Logout a user
      tags:
      - user
  /user/register:
    post:
      consumes:
      - application/json
      description: Register a new user with username, password, and email
      parameters:
      - description: User registration details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterUserReq'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            $ref: '#/definitions/dto.APIResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/dto.APIResponse'
        "500":
          description: Failed to register user
          schema:
            $ref: '#/definitions/dto.APIResponse'
      summary: Register a new user
      tags:
      - user
  /user/reset-password:
    post:
      consumes:
      - application/json
      description: Reset user password with username and new Password
      parameters:
      - description: User password reset details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.ResetPasswordReq'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset successfully
          schema:
            $ref: '#/definitions/dto.APIResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/dto.APIResponse'
        "500":
          description: Failed to reset password
          schema:
            $ref: '#/definitions/dto.APIResponse'
      summary: Reset user Password
      tags:
      - user
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
