{
    "swagger": "2.0",
    "info": {
        "description": "This is a server for Gin 3at API.",
        "title": "Gin 3at",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "n3xtchen",
            "url": "http://n3xtchen.github.io/n3xtchen",
            "email": "echenwen@gmail.com"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/api/v1",
    "paths": {
        "/categories": {
            "get": {
                "description": "Get all Categories",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Category"
                ],
                "summary": "Get All GetAllCategories",
                "responses": {
                    "200": {
                        "description": "List of categories",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.CategroyRes"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve categories",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/categories/{category_id}": {
            "get": {
                "description": "Get a category by its Is",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Category"
                ],
                "summary": "Get Category by Is",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Category ID",
                        "name": "category_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.CategroyRes"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Category not found",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/orders": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Create a new order",
                "parameters": [
                    {
                        "description": "Order details",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateOrderReq"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Order created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Inyernal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/products": {
            "get": {
                "description": "Get all Products",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Get All Products",
                "responses": {
                    "200": {
                        "description": "List of products",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.ProductRes"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve products",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/products/{product_id}": {
            "get": {
                "description": "Get a product by its IsDefault",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Get Product by Is",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "product_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.ProductRes"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Product not found",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "description": "Login a user with username and Password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Login a user",
                "parameters": [
                    {
                        "description": "User login details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginUserReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User logged in successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to login user",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/user/logout": {
            "post": {
                "description": "Logout a user by clearing their session",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Logout a user",
                "responses": {
                    "200": {
                        "description": "User logged out successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "400": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to logout user",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/user/register": {
            "post": {
                "description": "Register a new user with username, password, and email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RegisterUserReq"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User registered successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to register user",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        },
        "/user/reset-password": {
            "post": {
                "description": "Reset user password with username and new Password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Reset user Password",
                "parameters": [
                    {
                        "description": "User password reset details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ResetPasswordReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to reset password",
                        "schema": {
                            "$ref": "#/definitions/dto.APIResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.APIResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "$ref": "#/definitions/dto.Code"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.CategroyRes": {
            "type": "object",
            "properties": {
                "category_id": {
                    "description": "ID of the CategoryID",
                    "type": "integer"
                },
                "description": {
                    "description": "Description of the CategoryID",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the CategoryID",
                    "type": "string"
                }
            }
        },
        "dto.Code": {
            "type": "integer",
            "enum": [
                0
            ],
            "x-enum-varnames": [
                "CodeSuccess"
            ]
        },
        "dto.CreateAddressReq": {
            "type": "object",
            "required": [
                "address",
                "name",
                "phone"
            ],
            "properties": {
                "address": {
                    "description": "Full address",
                    "type": "string",
                    "maxLength": 50
                },
                "name": {
                    "description": "Name of the person",
                    "type": "string",
                    "maxLength": 20
                },
                "phone": {
                    "description": "Phone number",
                    "type": "string"
                }
            }
        },
        "dto.CreateOrderItemReq": {
            "type": "object",
            "required": [
                "price",
                "product_id",
                "quantity"
            ],
            "properties": {
                "price": {
                    "description": "Price of the product at the time of order",
                    "type": "number"
                },
                "product_id": {
                    "description": "ID of the Product",
                    "type": "integer"
                },
                "quantity": {
                    "description": "Quantity of the product in the Order",
                    "type": "integer",
                    "minimum": 1
                }
            }
        },
        "dto.CreateOrderReq": {
            "type": "object",
            "required": [
                "address",
                "amount",
                "order_items"
            ],
            "properties": {
                "address": {
                    "$ref": "#/definitions/dto.CreateAddressReq"
                },
                "amount": {
                    "description": "Total amount of the order",
                    "type": "number"
                },
                "order_items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CreateOrderItemReq"
                    }
                }
            }
        },
        "dto.LoginUserReq": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "description": "Password of the User",
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 6
                },
                "username": {
                    "description": "Username of the User",
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 3
                }
            }
        },
        "dto.ProductRes": {
            "type": "object",
            "properties": {
                "product_category_id": {
                    "description": "Category ID of the ProductID",
                    "type": "integer"
                },
                "product_category_name": {
                    "description": "Category Name of the ProductID",
                    "type": "string"
                },
                "product_desc": {
                    "description": "Description of the ProductID",
                    "type": "string"
                },
                "product_id": {
                    "description": "ID of the ProductID",
                    "type": "integer"
                },
                "product_image": {
                    "description": "Image URL of the ProductID",
                    "type": "string"
                },
                "product_name": {
                    "description": "Name of the ProductID",
                    "type": "string"
                },
                "product_price": {
                    "description": "Price of the ProductID",
                    "type": "number"
                }
            }
        },
        "dto.RegisterUserReq": {
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "description": "Email of the User",
                    "type": "string"
                },
                "password": {
                    "description": "Password of the User",
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 6
                },
                "username": {
                    "description": "Username of the User",
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 3
                }
            }
        },
        "dto.ResetPasswordReq": {
            "type": "object",
            "required": [
                "new_password",
                "old_password",
                "username"
            ],
            "properties": {
                "new_password": {
                    "description": "New Password of the User",
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 6
                },
                "old_password": {
                    "description": "Old Password of the User",
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 6
                },
                "username": {
                    "description": "Username of the User",
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 3
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}